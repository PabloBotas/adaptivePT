cmake_minimum_required(VERSION 3.2)

project(adaptive)

# set (PROJECT_ROOT_DIR "../adaptive")
set (CMAKE_INSTALL_PREFIX ".")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set (SEPARATE_COMPILATION ON)
# message ( STATUS "PROJECT_ROOT_DIR:       " ${PROJECT_ROOT_DIR} )
message ( STATUS "CMAKE_INSTALL_PREFIX: " ${CMAKE_INSTALL_PREFIX} )
message ( STATUS "OUTPUT_DIRECTORY:     " ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} )

#-C++ compiler-------------------------------------------------------
set (CMAKE_C_COMPILER "/usr/bin/gcc")
set (CMAKE_CXX_COMPILER "/usr/bin/g++")
set (CMAKE_CXX_STANDARD 11)
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-variadic-macros -Wno-language-extension-token")

#-Cuda compiler------------------------------------------------------
find_package(CUDA REQUIRED)
set (CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})
set (CUDA_PROPAGATE_HOST_FLAGS ON)
set (CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -std=c++11 -gencode arch=compute_35,code=sm_35 -D_FORCE_INLINES)
if (CMAKE_BUILD_TYPE STREQUAL Debug)
    if (DEVICE_DEBUGGING)
        set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -G)
    endif()
endif()
if (SEPARATE_COMPILATION)
    set(CUDA_SEPARABLE_COMPILATION ON)
endif()
option(REGISTERS_INFO "Outputs register and memory information per kernel" OFF)
if (REGISTERS_INFO)
    set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} --ptxas-options=-v)
endif()
option(COMPILE_SM20 "Compiles for compute capability of 2.0" OFF)
if (COMPILE_SM20)
    set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -gencode arch=compute_20,code=sm_20)
endif()
# set (CUDA_SDK_ROOT_DIR "/home/gmoc/NVIDIA_GPU_Computing_SDK")
# include_directories ("${CUDA_SDK_ROOT_DIR}")

# Definitions------------------------------------------------
option(DEBUG_READ_CT "Output a 32bit-float binary file with raw ct values" OFF)
if(DEBUG_READ_CT)
  add_definitions(-D__DEBUG_OUTPUT_READ_CT__)
endif()
get_filename_component(abs_bin_path ${CMAKE_INSTALL_PREFIX} ABSOLUTE)
add_definitions(-DBIN_PATH=${abs_bin_path} )
# option(DEBUG_RAYS "Use mode to export a CT volume with the ray paths" OFF)
# if(DEBUG_RAYS)
#   add_definitions(-D__OUTPUT_SCORER_VOLUME__)
# endif()

add_subdirectory(src)
# add_subdirectory(src/extra)